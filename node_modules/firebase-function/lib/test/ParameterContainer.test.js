"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const Crypter_1 = require("../src/crypter/Crypter");
const FixedLength_1 = require("../src/crypter/FixedLength");
const DatabaseType_1 = require("../src/DatabaseType");
const logger_1 = require("../src/logger");
const ParameterBuilder_1 = require("../src/parameter/ParameterBuilder");
const ParameterContainer_1 = require("../src/parameter/ParameterContainer");
describe('Parameter container', () => {
    const cryptionKeys = {
        encryptionKey: new FixedLength_1.FixedLength(Uint8Array.from([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]), 32),
        initialisationVector: new FixedLength_1.FixedLength(Uint8Array.from([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F]), 16),
        vernamKey: new FixedLength_1.FixedLength(Uint8Array.from([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F]), 32)
    };
    const logger = logger_1.Logger.start(new logger_1.VerboseType('coloredVerbose'), 'paramter container test');
    function createParameterContainer(data) {
        return new ParameterContainer_1.ParameterContainer(data, (databaseType) => {
            return {
                cryptionKeys: cryptionKeys,
                callSecretKey: '',
                databaseUrl: ''
            };
        }, logger.nextIndent);
    }
    it('parameters invalid', () => {
        (0, chai_1.expect)(() => createParameterContainer({
            databaseType: new DatabaseType_1.DatabaseType('testing')
        })).to.throw();
        (0, chai_1.expect)(() => createParameterContainer({
            databaseType: new DatabaseType_1.DatabaseType('testing'),
            parameters: 0
        })).to.throw();
    });
    it('get optional parameter invalid / undefined', () => {
        const crypter = new Crypter_1.Crypter(cryptionKeys);
        const parameterContainer = createParameterContainer({
            databaseType: new DatabaseType_1.DatabaseType('testing'),
            parameters: crypter.encodeEncrypt({
                value1: undefined,
                value2: null,
                value3: 'asdf'
            })
        });
        (0, chai_1.expect)(parameterContainer.optionalParameter('value0', ParameterBuilder_1.ParameterBuilder.value('number'), logger.nextIndent)).to.be.undefined;
        (0, chai_1.expect)(parameterContainer.optionalParameter('value1', ParameterBuilder_1.ParameterBuilder.value('number'), logger.nextIndent)).to.be.undefined;
        (0, chai_1.expect)(parameterContainer.optionalParameter('value2', ParameterBuilder_1.ParameterBuilder.value('number'), logger.nextIndent)).to.be.undefined;
        (0, chai_1.expect)(() => parameterContainer.optionalParameter('value3', ParameterBuilder_1.ParameterBuilder.value('number'), logger.nextIndent)).to.throw();
    });
    it('get optional parameter', () => {
        const crypter = new Crypter_1.Crypter(cryptionKeys);
        const parameterContainer = createParameterContainer({
            databaseType: new DatabaseType_1.DatabaseType('testing'),
            parameters: crypter.encodeEncrypt({
                value1: true,
                value2: 'asdf',
                value3: 12,
                value5: { v: 'asdf' },
                value6: null
            })
        });
        (0, chai_1.expect)(parameterContainer.optionalParameter('value1', ParameterBuilder_1.ParameterBuilder.value('boolean'), logger.nextIndent)).to.be.true;
        (0, chai_1.expect)(parameterContainer.optionalParameter('value2', ParameterBuilder_1.ParameterBuilder.value('string'), logger.nextIndent)).to.be.equal('asdf');
        (0, chai_1.expect)(parameterContainer.optionalParameter('value3', ParameterBuilder_1.ParameterBuilder.value('number'), logger.nextIndent)).to.be.equal(12);
        (0, chai_1.expect)(parameterContainer.optionalParameter('value5', ParameterBuilder_1.ParameterBuilder.value('object'), logger.nextIndent)).to.be.deep.equal({ v: 'asdf' });
        (0, chai_1.expect)(parameterContainer.optionalParameter('value6', ParameterBuilder_1.ParameterBuilder.value('undefined'), logger.nextIndent)).to.be.undefined;
    });
    it('get undefined parameter', () => {
        const crypter = new Crypter_1.Crypter(cryptionKeys);
        const parameterContainer = createParameterContainer({
            databaseType: new DatabaseType_1.DatabaseType('testing'),
            parameters: crypter.encodeEncrypt({
                value0: undefined
            })
        });
        (0, chai_1.expect)(() => parameterContainer.parameter('value0', ParameterBuilder_1.ParameterBuilder.value('number'), logger.nextIndent)).to.throw();
    });
    it('get parameter', () => {
        const crypter = new Crypter_1.Crypter(cryptionKeys);
        const parameterContainer = createParameterContainer({
            databaseType: new DatabaseType_1.DatabaseType('testing'),
            parameters: crypter.encodeEncrypt({
                value0: undefined,
                value1: true,
                value2: 'asdf',
                value3: 12,
                value5: { v: 'asdf' },
                value6: null
            })
        });
        (0, chai_1.expect)(parameterContainer.parameter('value0', ParameterBuilder_1.ParameterBuilder.value('undefined'), logger.nextIndent)).to.be.undefined;
        (0, chai_1.expect)(parameterContainer.parameter('value1', ParameterBuilder_1.ParameterBuilder.value('boolean'), logger.nextIndent)).to.be.true;
        (0, chai_1.expect)(parameterContainer.parameter('value2', ParameterBuilder_1.ParameterBuilder.value('string'), logger.nextIndent)).to.be.equal('asdf');
        (0, chai_1.expect)(parameterContainer.parameter('value3', ParameterBuilder_1.ParameterBuilder.value('number'), logger.nextIndent)).to.be.equal(12);
        (0, chai_1.expect)(parameterContainer.parameter('value5', ParameterBuilder_1.ParameterBuilder.value('object'), logger.nextIndent)).to.be.deep.equal({ v: 'asdf' });
        (0, chai_1.expect)(parameterContainer.parameter('value6', ParameterBuilder_1.ParameterBuilder.value('undefined'), logger.nextIndent)).to.be.undefined;
    });
});
