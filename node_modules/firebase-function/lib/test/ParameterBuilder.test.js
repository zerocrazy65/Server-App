"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const logger_1 = require("../src/logger");
const ParameterBuilder_1 = require("../src/parameter/ParameterBuilder");
describe('Parameter builder', () => {
    const logger = logger_1.Logger.start(new logger_1.VerboseType('coloredVerbose'), 'Parameter builder tests');
    it('multiple types', () => {
        const builder = new ParameterBuilder_1.ParameterBuilder(['string', 'number'], (value, logger) => value.toString());
        (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['string', 'number']);
        (0, chai_1.expect)(builder.build('asdf', logger.nextIndent)).to.be.equal('asdf');
        (0, chai_1.expect)(builder.build(1, logger.nextIndent)).to.be.equal('1');
    });
    describe('value', () => {
        it('undefined', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.value('undefined');
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['undefined']);
            (0, chai_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.undefined;
        });
        it('boolean', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.value('boolean');
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['boolean']);
            (0, chai_1.expect)(builder.build(true, logger.nextIndent)).to.be.true;
            (0, chai_1.expect)(builder.build(false, logger.nextIndent)).to.be.false;
        });
        it('string', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.value('string');
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['string']);
            (0, chai_1.expect)(builder.build('', logger.nextIndent)).to.be.equal('');
            (0, chai_1.expect)(builder.build('asdf', logger.nextIndent)).to.be.equal('asdf');
        });
        it('number', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.value('number');
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['number']);
            (0, chai_1.expect)(builder.build(0, logger.nextIndent)).to.be.equal(0);
            (0, chai_1.expect)(builder.build(1.5, logger.nextIndent)).to.be.equal(1.5);
            (0, chai_1.expect)(builder.build(-5, logger.nextIndent)).to.be.equal(-5);
        });
        it('bigint', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.value('bigint');
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['bigint']);
            (0, chai_1.expect)(builder.build(0n, logger.nextIndent)).to.be.equal(0n);
            (0, chai_1.expect)(builder.build(-5n, logger.nextIndent)).to.be.equal(-5n);
        });
        it('symbol', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.value('symbol');
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['symbol']);
            (0, chai_1.expect)(builder.build(Symbol.iterator, logger.nextIndent)).to.be.equal(Symbol.iterator);
        });
        it('object', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.value('object');
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['object']);
            (0, chai_1.expect)(builder.build(null, logger.nextIndent)).to.be.null;
            (0, chai_1.expect)(builder.build({ v1: 'asdf' }, logger.nextIndent)).to.be.deep.equal({ v1: 'asdf' });
            (0, chai_1.expect)(builder.build([0, 1, 2], logger.nextIndent)).to.be.deep.equal([0, 1, 2]);
        });
        it('function', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.value('function');
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['function']);
            const function1 = () => { };
            (0, chai_1.expect)(builder.build(function1, logger.nextIndent)).to.be.equal(function1);
            const function2 = (value) => value + 'asdf';
            (0, chai_1.expect)(builder.build(function2, logger.nextIndent)).to.be.equal(function2);
        });
    });
    describe('guard', () => {
        it('undefined', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.guard('undefined', ((value, logger) => value === undefined));
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['undefined']);
            (0, chai_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.undefined;
        });
        it('boolean', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.guard('boolean', ((value, logger) => value));
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['boolean']);
            (0, chai_1.expect)(builder.build(true, logger.nextIndent)).to.be.equal(true);
            (0, chai_1.expect)(() => builder.build(false, logger.nextIndent)).to.throw();
        });
        it('string', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.guard('string', ((value, logger) => value === 'a' || value === 'b'));
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['string']);
            (0, chai_1.expect)(builder.build('a', logger.nextIndent)).to.be.equal('a');
            (0, chai_1.expect)(builder.build('b', logger.nextIndent)).to.be.equal('b');
            (0, chai_1.expect)(() => builder.build('c', logger.nextIndent)).to.throw();
            (0, chai_1.expect)(() => builder.build('', logger.nextIndent)).to.throw();
        });
        it('number', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.guard('number', ((value, logger) => value === 1 || value === 2));
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['number']);
            (0, chai_1.expect)(builder.build(1, logger.nextIndent)).to.be.equal(1);
            (0, chai_1.expect)(builder.build(2, logger.nextIndent)).to.be.equal(2);
            (0, chai_1.expect)(() => builder.build(3, logger.nextIndent)).to.throw();
        });
        it('bigint', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.guard('bigint', ((value, logger) => value === 1n || value === 2n));
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['bigint']);
            (0, chai_1.expect)(builder.build(1n, logger.nextIndent)).to.be.equal(1n);
            (0, chai_1.expect)(builder.build(2n, logger.nextIndent)).to.be.equal(2n);
            (0, chai_1.expect)(() => builder.build(3n, logger.nextIndent)).to.throw();
        });
        it('object', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.guard('object', ((value, logger) => value !== null && 'v' in value && typeof value.v === 'string'));
            (0, chai_1.expect)(builder.expectedTypes).be.be.deep.equal(['object']);
            (0, chai_1.expect)(builder.build({ v: 'asdf' }, logger.nextIndent)).to.be.deep.equal({ v: 'asdf' });
            (0, chai_1.expect)(() => builder.build(null, logger.nextIndent)).to.throw();
            (0, chai_1.expect)(() => builder.build({}, logger.nextIndent)).to.throw();
            (0, chai_1.expect)(() => builder.build({ v: 0 }, logger.nextIndent)).to.throw();
        });
    });
    describe('build', () => {
        it('undefined', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.build('undefined', (value, logger) => 'asdf');
            (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['undefined']);
            (0, chai_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.equal('asdf');
        });
        it('boolean', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.build('boolean', (value, logger) => value ? 'a' : 'b');
            (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['boolean']);
            (0, chai_1.expect)(builder.build(true, logger.nextIndent)).to.be.equal('a');
            (0, chai_1.expect)(builder.build(false, logger.nextIndent)).to.be.equal('b');
        });
        it('string', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.build('string', (value, logger) => value + 'asdf');
            (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['string']);
            (0, chai_1.expect)(builder.build('', logger.nextIndent)).to.be.equal('asdf');
            (0, chai_1.expect)(builder.build('ölkj', logger.nextIndent)).to.be.equal('ölkjasdf');
        });
        it('number', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.build('number', (value, logger) => value.toString());
            (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['number']);
            (0, chai_1.expect)(builder.build(0, logger.nextIndent)).to.be.equal('0');
            (0, chai_1.expect)(builder.build(-1.5, logger.nextIndent)).to.be.equal('-1.5');
        });
        it('bigint', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.build('bigint', (value, logger) => value.toString());
            (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['bigint']);
            (0, chai_1.expect)(builder.build(0n, logger.nextIndent)).to.be.equal('0');
            (0, chai_1.expect)(builder.build(-15n, logger.nextIndent)).to.be.equal('-15');
        });
        it('object', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.build('object', (value, logger) => value === null ? null : 'asdf');
            (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['object']);
            (0, chai_1.expect)(builder.build(null, logger.nextIndent)).to.be.null;
            (0, chai_1.expect)(builder.build({}, logger.nextIndent)).to.be.equal('asdf');
        });
    });
    describe('optional', () => {
        it('undefined', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.optional(ParameterBuilder_1.ParameterBuilder.value('undefined'));
            (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['undefined']);
            (0, chai_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.undefined;
        });
        it('number', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.optional(ParameterBuilder_1.ParameterBuilder.value('number'));
            (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['undefined', 'number']);
            (0, chai_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.undefined;
            (0, chai_1.expect)(builder.build(0, logger.nextIndent)).to.be.equal(0);
        });
        it('multiple optional', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.optional(ParameterBuilder_1.ParameterBuilder.optional(ParameterBuilder_1.ParameterBuilder.optional(ParameterBuilder_1.ParameterBuilder.value('number'))));
            (0, chai_1.expect)(builder.expectedTypes).to.be.deep.equal(['undefined', 'number']);
            (0, chai_1.expect)(builder.build(undefined, logger.nextIndent)).to.be.undefined;
            (0, chai_1.expect)(builder.build(0, logger.nextIndent)).to.be.equal(0);
        });
    });
    describe('array', () => {
        it('undefined', () => {
            const builder1 = ParameterBuilder_1.ParameterBuilder.array(ParameterBuilder_1.ParameterBuilder.value('undefined'));
            const builder2 = ParameterBuilder_1.ParameterBuilder.array(ParameterBuilder_1.ParameterBuilder.value('undefined'), 2);
            (0, chai_1.expect)(() => builder1.build(null, logger.nextIndent)).to.throw();
            (0, chai_1.expect)(() => builder1.build({ v: 'asdf' }, logger.nextIndent)).to.throw();
            (0, chai_1.expect)(() => builder2.build([], logger.nextIndent)).to.throw();
            (0, chai_1.expect)(() => builder2.build([undefined], logger.nextIndent)).to.throw();
            (0, chai_1.expect)(() => builder1.build([0, 1, 2], logger.nextIndent)).to.throw();
            (0, chai_1.expect)(builder1.build([], logger.nextIndent)).to.be.deep.equal([]);
            (0, chai_1.expect)(builder1.build([undefined], logger.nextIndent)).to.be.deep.equal([undefined]);
            (0, chai_1.expect)(builder2.build([undefined, undefined], logger.nextIndent)).to.be.deep.equal([undefined, undefined]);
        });
        it('number', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.array(ParameterBuilder_1.ParameterBuilder.value('number'));
            (0, chai_1.expect)(builder.build([], logger.nextIndent)).to.be.deep.equal([]);
            (0, chai_1.expect)(builder.build([0, 1, 2], logger.nextIndent)).to.be.deep.equal([0, 1, 2]);
        });
        it('build', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.array(ParameterBuilder_1.ParameterBuilder.build('number', value => value.toString()));
            (0, chai_1.expect)(builder.build([], logger.nextIndent)).to.be.deep.equal([]);
            (0, chai_1.expect)(builder.build([0, 1, 2], logger.nextIndent)).to.be.deep.equal(['0', '1', '2']);
        });
        it('optional', () => {
            const builder = ParameterBuilder_1.ParameterBuilder.array(ParameterBuilder_1.ParameterBuilder.optional(ParameterBuilder_1.ParameterBuilder.value('string')));
            (0, chai_1.expect)(builder.build([], logger.nextIndent)).to.be.deep.equal([]);
            (0, chai_1.expect)(builder.build(['0', undefined, '1', undefined, undefined, '2'], logger.nextIndent)).to.be.deep.equal(['0', undefined, '1', undefined, undefined, '2']);
        });
    });
});
