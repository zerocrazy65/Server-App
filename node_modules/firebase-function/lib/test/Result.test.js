"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const Result_1 = require("../src/Result");
describe('Result', () => {
    it('success', () => {
        const result = Result_1.Result.success('asdf');
        (0, chai_1.expect)(result).to.be.deep.equal({
            state: 'success',
            value: 'asdf'
        });
        (0, chai_1.expect)(result.get()).to.be.equal('asdf');
        (0, chai_1.expect)(result.value).to.be.equal('asdf');
        (0, chai_1.expect)(result.error).to.be.null;
        (0, chai_1.expect)(result.valueOrError).to.be.equal('asdf');
        (0, chai_1.expect)(result.map(v => v + '_')).to.be.deep.equal({
            state: 'success',
            value: 'asdf_'
        });
        (0, chai_1.expect)(result.mapError(v => {
            return {
                ...v,
                message: v.message + '_'
            };
        })).to.be.deep.equal({
            state: 'success',
            value: 'asdf'
        });
        (0, chai_1.expect)(Result_1.Result.isSuccess(result)).to.be.true;
        (0, chai_1.expect)(Result_1.Result.isFailure(result)).to.be.false;
        (0, chai_1.expect)(Result_1.Result.success()).to.be.deep.equal({
            state: 'success',
            value: undefined
        });
    });
    it('failure', () => {
        const result = Result_1.Result.failure({
            name: 'opiu',
            message: 'nrtz'
        });
        (0, chai_1.expect)(result).to.be.deep.equal({
            state: 'failure',
            error: {
                name: 'opiu',
                message: 'nrtz'
            }
        });
        try {
            result.get();
            chai_1.expect.fail();
        }
        catch (error) {
            (0, chai_1.expect)(error).to.be.deep.equal({
                name: 'opiu',
                message: 'nrtz'
            });
        }
        (0, chai_1.expect)(result.value).to.be.null;
        (0, chai_1.expect)(result.error).to.be.deep.equal({
            name: 'opiu',
            message: 'nrtz'
        });
        (0, chai_1.expect)(result.valueOrError).to.be.deep.equal({
            name: 'opiu',
            message: 'nrtz'
        });
        (0, chai_1.expect)(result.map(v => v + '_')).to.be.deep.equal({
            state: 'failure',
            error: {
                name: 'opiu',
                message: 'nrtz'
            }
        });
        (0, chai_1.expect)(result.mapError(v => {
            return {
                ...v,
                message: v.message + '_'
            };
        })).to.be.deep.equal({
            state: 'failure',
            error: {
                name: 'opiu',
                message: 'nrtz_'
            }
        });
        (0, chai_1.expect)(Result_1.Result.isSuccess(result)).to.be.false;
        (0, chai_1.expect)(Result_1.Result.isFailure(result)).to.be.true;
    });
});
