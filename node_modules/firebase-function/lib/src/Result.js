"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Result = void 0;
var Result;
(function (Result) {
    /**
     * Contains the value, if the result is success.
     */
    class Success {
        value;
        /**
         * State of the result. `success` if result is Success, `failure` otherwise.
         */
        state = 'success';
        /**
         * Constructs the success result with the value of the result.
         * @param value Value of the result, if the result is success.
         */
        constructor(value) {
            this.value = value;
        }
        /**
         * Error of the result, if the result is failure.
         */
        get error() {
            return null;
        }
        /**
         * Value of the result, if the result is success, or the error, if the result is failure.
         */
        get valueOrError() {
            return this.value;
        }
        /**
         * Get the value of the result, if the result is success, or throws the error, if result is failure.
         * @returns Value of the result, if the result is success.
         */
        get() {
            return this.value;
        }
        /**
         * Map the value of the result, if the result is success.
         * @param mapper Mapper to map the value.
         * @returns New result with mapped value.
         */
        map(mapper) {
            return new Result.Success(mapper(this.value));
        }
        /**
         * Map the error of the result, if the result is failure.
         * @param mapper Mapper to map the error.
         * @returns New result with mapped error.
         */
        mapError() {
            return this;
        }
    }
    Result.Success = Success;
    /**
     * Contains the error, if the result is failure.
     */
    class Failure {
        error;
        /**
         * State of the result. `success` if result is Success, `failure` otherwise.
         */
        state = 'failure';
        /**
         * Constructs the failure result with the error of the result.
         * @param error Error of the result, if the result is failure.
         */
        constructor(error) {
            this.error = error;
        }
        /**
         * Value of the result, if the result if success.
         */
        get value() {
            return null;
        }
        /**
         * Value of the result, if the result is success, or the error, if the result is failure.
         */
        get valueOrError() {
            return this.error;
        }
        /**
         * Get the value of the result, if the result is success, or throws the error, if result is failure.
         * @returns Value of the result, if the result is success.
         */
        get() {
            // eslint-disable-next-line @typescript-eslint/no-throw-literal
            throw this.error;
        }
        /**
         * Map the value of the result, if the result is success.
         * @param mapper Mapper to map the value.
         * @returns New result with mapped value.
         */
        map() {
            return this;
        }
        /**
         * Map the error of the result, if the result is failure.
         * @param mapper Mapper to map the error.
         * @returns New result with mapped error.
         */
        mapError(mapper) {
            return new Result.Failure(mapper(this.error));
        }
    }
    Result.Failure = Failure;
    function success(value) {
        return new Result.Success(value);
    }
    Result.success = success;
    /**
     * Constructs the failure result with the error of the result.
     * @param error Error of the result, if the result is failure.
     */
    function failure(error) {
        return new Result.Failure(error);
    }
    Result.failure = failure;
    /**
     * Indicates whether the specifed result is success.
     * @param result Result to check if it is success.
     * @returns `true` if specifed result is success, `false` otherwise.
     */
    function isSuccess(result) {
        return result.state === 'success';
    }
    Result.isSuccess = isSuccess;
    /**
     * Indicates whether the specifed result is failure.
     * @param result Result to check if it is failure.
     * @returns `true` if specifed result is failure, `false` otherwise.
     */
    function isFailure(result) {
        return result.state === 'failure';
    }
    Result.isFailure = isFailure;
})(Result = exports.Result || (exports.Result = {}));
