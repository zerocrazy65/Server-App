import { type Database } from 'firebase/database';
import { Crypter } from '../crypter';
import { type GetCryptedScheme, type IsCryptedScheme, type SchemeType } from '../database';
export declare class FirebaseDatabase<Scheme extends SchemeType> {
    private readonly database;
    private readonly cryptionKeys;
    private readonly path?;
    constructor(database: Database, cryptionKeys: Crypter.Keys, path?: string | undefined);
    child<Key extends true extends IsCryptedScheme<Scheme> ? never : (keyof Scheme & string)>(key: Key): FirebaseDatabase<Scheme extends Record<string, SchemeType> ? Scheme[Key] : never>;
    set(value: GetCryptedScheme<Scheme>, crypted: 'encrypt'): Promise<void>;
    set(value: true extends IsCryptedScheme<Scheme> ? never : Scheme): Promise<void>;
    private value;
    get(crypted: 'decrypt'): Promise<true extends IsCryptedScheme<Scheme> ? GetCryptedScheme<Scheme> : never>;
    get(): Promise<true extends IsCryptedScheme<Scheme> ? never : Scheme>;
    exists(): Promise<boolean>;
    remove(): Promise<void>;
}
