"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirebaseDatabase = void 0;
const database_1 = require("firebase/database");
const crypter_1 = require("../crypter");
class FirebaseDatabase {
    database;
    cryptionKeys;
    path;
    constructor(database, cryptionKeys, path) {
        this.database = database;
        this.cryptionKeys = cryptionKeys;
        this.path = path;
    }
    child(key) {
        return new FirebaseDatabase(this.database, this.cryptionKeys, this.path === undefined ? key.replaceAll('/', '_') : `${this.path}/${key.replaceAll('/', '_')}`);
    }
    async set(value, crypted = 'plain') {
        if (crypted === 'encrypt') {
            const crypter = new crypter_1.Crypter(this.cryptionKeys);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            value = crypter.encodeEncrypt(value);
        }
        const reference = (0, database_1.ref)(this.database, this.path);
        await (0, database_1.set)(reference, value);
    }
    async value() {
        const reference = (0, database_1.ref)(this.database, this.path);
        return await new Promise(resolve => {
            (0, database_1.onValue)(reference, snapshot => {
                if (!snapshot.exists())
                    throw new Error('No data in snapshot.');
                resolve(snapshot.val());
            }, {
                onlyOnce: true
            });
        });
    }
    async get(crypted = 'plain') {
        if (crypted === 'decrypt') {
            const crypter = new crypter_1.Crypter(this.cryptionKeys);
            return crypter.decryptDecode(await this.value());
        }
        return await this.value();
    }
    async exists() {
        const reference = (0, database_1.ref)(this.database, this.path);
        return await new Promise(resolve => {
            (0, database_1.onValue)(reference, snapshot => {
                resolve(snapshot.exists());
            }, {
                onlyOnce: true
            });
        });
    }
    async remove() {
        const reference = (0, database_1.ref)(this.database, this.path);
        await (0, database_1.remove)(reference);
    }
}
exports.FirebaseDatabase = FirebaseDatabase;
