"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingProperty = void 0;
const StringBuilder_1 = require("../StringBuilder");
const util_1 = require("util");
class LoggingProperty {
    functionName;
    logLevel;
    indent;
    details;
    constructor(functionName, logLevel, indent, details) {
        this.functionName = functionName;
        this.logLevel = logLevel;
        this.indent = indent;
        this.details = details;
    }
    prefix(start = false) {
        return '|   '.repeat(this.indent) + (start ? '> ' : '| ');
    }
    completeLog(verbose) {
        const builder = new StringBuilder_1.StringBuilder();
        builder.appendLine(this.prefix(true) + this.logLevel.coloredText(`[${this.functionName}]`, verbose.isColored) + (verbose.isVerbose ? ': {' : ''));
        if (this.details !== undefined && verbose.isVerbose) {
            for (const entry of Object.entries(this.details))
                builder.append(this.detailString(entry[0], entry[1], verbose));
        }
        if (verbose.isVerbose)
            builder.appendLine(this.prefix(false) + '}');
        return builder.toString();
    }
    detailString(key, detail, verbose) {
        const builder = new StringBuilder_1.StringBuilder();
        const jsonLines = (0, util_1.inspect)(detail, { compact: true, depth: null, maxArrayLength: 25, maxStringLength: 250, breakLength: Number.POSITIVE_INFINITY }).split('\n') ?? [''];
        const coloredText = (value) => {
            if (verbose.isColored)
                return `\x1b[2m${value}\x1b[0m`;
            return value;
        };
        builder.appendLine(this.prefix() + '    ' + `${key}: ${coloredText(jsonLines.shift() ?? '')}`);
        for (const line of jsonLines)
            builder.appendLine(this.prefix() + '        ' + coloredText(line));
        return builder.toString();
    }
}
exports.LoggingProperty = LoggingProperty;
