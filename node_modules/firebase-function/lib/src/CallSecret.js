"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallSecret = void 0;
const crypter_1 = require("./crypter");
const HttpsError_1 = require("./HttpsError");
var CallSecret;
(function (CallSecret) {
    function fromObject(value, logger) {
        logger.log('CallSecret.fromObject', { value: value });
        if (value === null)
            throw (0, HttpsError_1.HttpsError)('internal', 'Couldn\'t get call secret from null.', logger);
        if (!('expiresAt' in value) || typeof value.expiresAt !== 'string')
            throw (0, HttpsError_1.HttpsError)('internal', 'Couldn\'t get expiresAt for call secret.', logger);
        if (!('hashedData' in value) || typeof value.hashedData !== 'string')
            throw (0, HttpsError_1.HttpsError)('internal', 'Couldn\'t get hashed data for call secret.', logger);
        return {
            expiresAt: value.expiresAt,
            hashedData: value.hashedData
        };
    }
    CallSecret.fromObject = fromObject;
    function checkCallSecret(callSecret, callSecretKey, logger) {
        const actualHashedData = crypter_1.Crypter.sha512(callSecret.expiresAt, callSecretKey);
        if (callSecret.hashedData !== actualHashedData)
            throw (0, HttpsError_1.HttpsError)('permission-denied', 'Call secret is rejected, since the hashed data is invalid.', logger);
        if (new Date() > new Date(callSecret.expiresAt))
            throw (0, HttpsError_1.HttpsError)('permission-denied', 'Call secret is rejected, since it is expired.', logger);
    }
    CallSecret.checkCallSecret = checkCallSecret;
})(CallSecret = exports.CallSecret || (exports.CallSecret = {}));
