"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Crypter = void 0;
const RandomBitIterator_1 = require("./RandomBitIterator");
const BytesToBitIterator_1 = require("./BytesToBitIterator");
const CombineIterator_1 = require("./CombineIterator");
const utils_1 = require("./utils");
const aes_ts_1 = require("aes-ts");
const sha512_crypt_ts_1 = require("sha512-crypt-ts");
class Crypter {
    cryptionKeys;
    constructor(cryptionKeys) {
        this.cryptionKeys = cryptionKeys;
    }
    encryptAes(bytes) {
        const encrypter = new aes_ts_1.CBCEncryptor(this.cryptionKeys.encryptionKey.value, this.cryptionKeys.initialisationVector.value);
        return encrypter.encrypt((0, utils_1.addPadding)(bytes));
    }
    decryptAes(bytes) {
        const decrypter = new aes_ts_1.CBCDecryptor(this.cryptionKeys.encryptionKey.value, this.cryptionKeys.initialisationVector.value);
        return (0, utils_1.removePadding)(decrypter.decrypt(bytes));
    }
    encryptVernamCipher(bytes) {
        const key = (0, utils_1.randomBytes)(32);
        const randomBitIterator = new RandomBitIterator_1.RandomBitIterator(Uint8Array.from([...key, ...this.cryptionKeys.vernamKey.value]));
        const bytesToBitIterator = new BytesToBitIterator_1.BytesToBitIterator(bytes);
        const combineIterator = new CombineIterator_1.CombineIterator(randomBitIterator, bytesToBitIterator, utils_1.xor);
        return Uint8Array.from([...key, ...(0, utils_1.bitIteratorToBytes)(combineIterator)]);
    }
    decryptVernamCipher(bytes) {
        const randomBitIterator = new RandomBitIterator_1.RandomBitIterator(Uint8Array.from([...bytes.slice(0, 32), ...this.cryptionKeys.vernamKey.value]));
        const bytesToBitIterator = new BytesToBitIterator_1.BytesToBitIterator(bytes.slice(32));
        const combineIterator = new CombineIterator_1.CombineIterator(randomBitIterator, bytesToBitIterator, utils_1.xor);
        return (0, utils_1.bitIteratorToBytes)(combineIterator);
    }
    encryptVernamAndAes(bytes) {
        const vernamEncrypted = this.encryptVernamCipher(bytes);
        return this.encryptAes(vernamEncrypted);
    }
    decryptAesAndVernam(bytes) {
        const aesDecrypted = this.decryptAes(bytes);
        return this.decryptVernamCipher(aesDecrypted);
    }
    decryptDecode(data) {
        if (data === '')
            return undefined;
        const dataBytes = (0, utils_1.unishortBytes)(data);
        const decryptedData = this.decryptAesAndVernam(dataBytes);
        return JSON.parse((0, utils_1.unishortString)(decryptedData));
    }
    encodeEncrypt(data) {
        const encodedData = JSON.stringify(data);
        const dataBytes = (0, utils_1.unishortBytes)(encodedData ?? '');
        const encryptedData = this.encryptVernamAndAes(dataBytes);
        return (0, utils_1.unishortString)(encryptedData);
    }
}
exports.Crypter = Crypter;
(function (Crypter) {
    function sha512(value, key) {
        const hashedValue = key === undefined ? sha512_crypt_ts_1.sha512.base64(value) : sha512_crypt_ts_1.sha512.base64Hmac(key, value);
        return hashedValue.replaceAll('/', '_');
    }
    Crypter.sha512 = sha512;
})(Crypter = exports.Crypter || (exports.Crypter = {}));
