"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapReturnTypeToResult = exports.executeFunction = exports.FirebaseFunction = void 0;
const functions = __importStar(require("firebase-functions"));
const CallSecret_1 = require("./CallSecret");
const Crypter_1 = require("./crypter/Crypter");
const DatabaseType_1 = require("./DatabaseType");
const HttpsError_1 = require("./HttpsError");
const logger_1 = require("./logger");
const Result_1 = require("./Result");
var FirebaseFunction;
(function (FirebaseFunction_1) {
    function create(FirebaseFunction, getPrivateKeys) {
        return functions
            .region('europe-west1')
            .https
            .onCall(async (data, context) => {
            const initialLogger = new logger_1.DummyLogger();
            if (typeof data !== 'object' || data === null)
                throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Function parameter data has to be an object.', initialLogger);
            // Get database
            if (!('databaseType' in data) || typeof data.databaseType !== 'string')
                throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Couldn\'t get database type from function parameter data.', initialLogger);
            const databaseType = DatabaseType_1.DatabaseType.fromString(data.databaseType, initialLogger.nextIndent);
            // Get logger verbose type
            if (!('verbose' in data) || typeof data.verbose !== 'string')
                throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Couldn\'t get verbose type from function parameter data.', initialLogger);
            const loggerVerboseType = logger_1.VerboseType.fromString(data.verbose, databaseType, initialLogger.nextIndent);
            const logger = logger_1.Logger.start(loggerVerboseType, 'FirebaseFunction.create', { auth: context.auth }, 'notice');
            // Check call secret
            if (!('callSecret' in data) || typeof data.callSecret !== 'object')
                throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Couldn\'t get call secret from function parameter data.', logger);
            const callSecret = CallSecret_1.CallSecret.fromObject(data.callSecret, logger.nextIndent);
            CallSecret_1.CallSecret.checkCallSecret(callSecret, getPrivateKeys(databaseType).callSecretKey, logger.nextIndent);
            // Get result of function call
            const result = await executeFunction(new FirebaseFunction({
                ...data,
                databaseType: databaseType
            }, context.auth, logger.nextIndent));
            // Encrypt result
            const crypter = new Crypter_1.Crypter(getPrivateKeys(databaseType).cryptionKeys);
            return crypter.encodeEncrypt(result);
        });
    }
    FirebaseFunction_1.create = create;
})(FirebaseFunction = exports.FirebaseFunction || (exports.FirebaseFunction = {}));
async function executeFunction(firebaseFunction) {
    try {
        return await mapReturnTypeToResult(firebaseFunction.executeFunction());
    }
    catch (error) {
        return Result_1.Result.failure(convertToFunctionResultError(error));
    }
}
exports.executeFunction = executeFunction;
/**
 * Get the result of a promise:
 *     - Result.success if promise resolves.
 *     - Result.failure if promise rejects.
 * @template T Type of the promise.
 * @param { Promise<T> } promise Promise to get result from.
 * @return { Promise<Result<T, Error>> } Return promise.
 */
async function mapReturnTypeToResult(promise) {
    return await promise
        .then(value => Result_1.Result.success((value ?? null)))
        .catch(reason => Result_1.Result.failure(convertToFunctionResultError(reason)));
}
exports.mapReturnTypeToResult = mapReturnTypeToResult;
/**
 * Check if specified status is a functions error code.
 * @param { string } status Status to check.
 * @return { boolean } true if status is a functions error code, false otherwise.
 */
function isFunctionsErrorCode(status) {
    return [
        'ok', 'cancelled', 'unknown', 'invalid-argument', 'deadline-exceeded', 'not-found', 'already-exists',
        'permission-denied', 'resource-exhausted', 'failed-precondition', 'aborted', 'out-of-range', 'unimplemented',
        'internal', 'unavailable', 'data-loss', 'unauthenticated'
    ].includes(status);
}
/**
 * Convert any error to a firebase function result error.
 * @param { unknown } error Error to convert.
 * @return { FirebaseFunction.Result.Error } Converted firebase function result error.
 */
function convertToFunctionResultError(error) {
    const errorIsObject = error !== null && typeof error === 'object';
    const hasMessage = errorIsObject && 'message' in error && error.message !== undefined && error.message !== null && error.message !== '';
    const hasStack = errorIsObject && 'stack' in error && error.stack !== undefined && error.stack !== null && error.stack !== '';
    return {
        name: 'FirebaseFunctionError',
        code: errorIsObject && 'code' in error && typeof error.code === 'string' && isFunctionsErrorCode(error.code) ? error.code : 'unknown',
        message: hasMessage ? `${error.message}` : 'Unknown error occured, see details for more infos.',
        details: hasMessage && 'details' in error ? error.details : error,
        stack: hasStack ? `${error.stack}` : undefined
    };
}
