import { type ILogger } from '../logger';
import { type TypeFrom, type TypeOfName } from './TypeOf';
export declare class ParameterBuilder<TypeName extends TypeOfName, T> {
    readonly expectedTypes: TypeName[];
    readonly build: (value: TypeFrom<TypeName>, logger: ILogger) => T;
    constructor(expectedTypes: TypeName[], build: (value: TypeFrom<TypeName>, logger: ILogger) => T);
}
export declare namespace ParameterBuilder {
    function value<TypeName extends TypeOfName>(typeName: TypeName): ParameterBuilder<TypeName, TypeFrom<TypeName>>;
    function guard<TypeName extends TypeOfName, T extends TypeFrom<TypeName>>(typeName: TypeName, typeGuard: (value: TypeFrom<TypeName>, logger: ILogger) => value is T): ParameterBuilder<TypeName, T>;
    function build<TypeName extends TypeOfName, T>(typeName: TypeName, build: (value: TypeFrom<TypeName>, logger: ILogger) => T): ParameterBuilder<TypeName, T>;
    function optional<TypeName extends TypeOfName, T>(builder: ParameterBuilder<TypeName, T>): ParameterBuilder<TypeName | 'undefined', T | undefined>;
    function array<TypeName extends TypeOfName, T>(builder: ParameterBuilder<TypeName, T>, length?: number): ParameterBuilder<'object', T[]>;
}
