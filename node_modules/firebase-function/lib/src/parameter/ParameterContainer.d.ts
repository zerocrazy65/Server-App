import { type DatabaseType } from '../DatabaseType';
import { type ILogger } from '../logger';
import { type PrivateKeys } from '../PrivateKeys';
import { type ParameterBuilder } from './ParameterBuilder';
import { type TypeOfName } from './TypeOf';
export declare class ParameterContainer {
    private readonly data;
    readonly databaseType: DatabaseType;
    constructor(data: Record<PropertyKey, unknown> & {
        databaseType: DatabaseType;
    }, getPrivateKeys: (databaseType: DatabaseType) => PrivateKeys, logger: ILogger);
    optionalParameter<TypeName extends TypeOfName, T>(key: PropertyKey, builder: ParameterBuilder<TypeName, T>, logger: ILogger): T | undefined;
    parameter<TypeName extends TypeOfName, T>(key: PropertyKey, builder: ParameterBuilder<TypeName, T>, logger: ILogger): T;
}
