"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterBuilder = void 0;
const HttpsError_1 = require("../HttpsError");
class ParameterBuilder {
    expectedTypes;
    build;
    constructor(expectedTypes, build) {
        this.expectedTypes = expectedTypes;
        this.build = build;
    }
}
exports.ParameterBuilder = ParameterBuilder;
(function (ParameterBuilder) {
    function value(typeName) {
        return new ParameterBuilder([typeName], (value, logger) => {
            logger.log('ParameterBuilder.value', { typeName: typeName, value: value });
            return value;
        });
    }
    ParameterBuilder.value = value;
    function guard(typeName, typeGuard) {
        return new ParameterBuilder([typeName], (value, logger) => {
            logger.log('ParameterBuilder.guard', { typeName: typeName, value: value });
            if (!typeGuard(value, logger.nextIndent))
                throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Invalid parameter, type guard failed.', logger);
            return value;
        });
    }
    ParameterBuilder.guard = guard;
    function build(typeName, build) {
        return new ParameterBuilder([typeName], (value, logger) => {
            logger.log('ParameterBuilder.build', { typeName: typeName, value: value });
            return build(value, logger.nextIndent);
        });
    }
    ParameterBuilder.build = build;
    function optional(builder) {
        const expectedTypes = builder.expectedTypes.includes('undefined') ? builder.expectedTypes : ['undefined', ...builder.expectedTypes];
        return new ParameterBuilder(expectedTypes, (value, logger) => {
            logger.log('ParameterBuilder.optional', { expectedTypes: builder.expectedTypes, value: value });
            if (typeof value === 'undefined')
                return undefined;
            return builder.build(value, logger.nextIndent);
        });
    }
    ParameterBuilder.optional = optional;
    function array(builder, length) {
        return new ParameterBuilder(['object'], (value, logger) => {
            logger.log('ParameterBuilder.array', { expectedTypes: builder.expectedTypes, value: value });
            if (value === null || !Array.isArray(value))
                throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Value is not an array.', logger);
            if (length !== undefined && value.length !== length)
                throw (0, HttpsError_1.HttpsError)('invalid-argument', `Value array has not the expectd length ${length}.`, logger);
            return value.map(element => {
                if (!builder.expectedTypes.includes(typeof element))
                    throw (0, HttpsError_1.HttpsError)('invalid-argument', `Array element has an invalid type, expected: ${builder.expectedTypes}`, logger);
                return builder.build(element, logger.nextIndent);
            });
        });
    }
    ParameterBuilder.array = array;
})(ParameterBuilder = exports.ParameterBuilder || (exports.ParameterBuilder = {}));
