"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterContainer = void 0;
const Crypter_1 = require("../crypter/Crypter");
const HttpsError_1 = require("../HttpsError");
class ParameterContainer {
    data;
    databaseType;
    constructor(data, getPrivateKeys, logger) {
        const crypter = new Crypter_1.Crypter(getPrivateKeys(data.databaseType).cryptionKeys);
        // Get and decrypt parameters
        if (!('parameters' in data) || typeof data.parameters !== 'string')
            throw (0, HttpsError_1.HttpsError)('invalid-argument', 'Missing parameters in firebase function parameters.', logger);
        this.data = crypter.decryptDecode(data.parameters);
        this.databaseType = data.databaseType;
    }
    optionalParameter(key, builder, logger) {
        logger.log('ParameterContainer.optionalParameter', { key: key, expectedTypes: builder.expectedTypes });
        // Return undefined if the parameter doesn't exist
        if (this.data === undefined || this.data === null || typeof this.data !== 'object' || !(key in this.data))
            return undefined;
        // Get the parameter from the firebase function data
        const parameter = this.data[key];
        // Return undefined if the parameter is undefined or null
        if (parameter === undefined || parameter === null)
            return undefined;
        // Check expected type
        if (!builder.expectedTypes.includes(typeof parameter))
            throw (0, HttpsError_1.HttpsError)('invalid-argument', `Parameter ${key.toString()} has an invalid type, expected: ${builder.expectedTypes}`, logger);
        // Build and return parameter
        return builder.build(parameter, logger.nextIndent);
    }
    parameter(key, builder, logger) {
        logger.log('ParameterContainer.parameter', { key: key, expectedTypes: builder.expectedTypes });
        // Get parameter that is possible optional
        const parameter = this.optionalParameter(key, builder, logger.nextIndent);
        // Check if the parameter is undefined
        if (parameter === undefined) {
            if (!builder.expectedTypes.includes('undefined'))
                throw (0, HttpsError_1.HttpsError)('invalid-argument', `Parameter ${key.toString()} cannot be undefined.`, logger);
            return builder.build(parameter, logger.nextIndent);
        }
        // Return parameter
        return parameter;
    }
}
exports.ParameterContainer = ParameterContainer;
