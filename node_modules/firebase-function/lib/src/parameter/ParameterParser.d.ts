import { type DatabaseType } from '../DatabaseType';
import { type ILogger } from '../logger';
import { type ParameterBuilder } from './ParameterBuilder';
import { type ParameterContainer } from './ParameterContainer';
import { type TypeOfName } from './TypeOf';
export type ParameterBuilders<Parameters extends Record<string, unknown>> = {
    [Key in keyof Parameters]: ParameterBuilder<TypeOfName, Parameters[Key]>;
};
export declare class ParameterParser<Parameters extends Record<string, unknown>> {
    private readonly paramterBuilders;
    private readonly logger;
    private initialParameters?;
    constructor(paramterBuilders: ParameterBuilders<Parameters>, logger: ILogger);
    get parameters(): Parameters & {
        databaseType: DatabaseType;
    };
    parseParameters(container: ParameterContainer): void;
}
