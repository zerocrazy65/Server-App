/**
 * Contains the value, if the result is success, or the error, if the result is failure.
 */
export type Result<T, E extends Error> = Result.Success<T> | Result.Failure<E>;
export declare namespace Result {
    /**
     * Contains the value, if the result is success.
     */
    class Success<T> {
        readonly value: T;
        /**
         * State of the result. `success` if result is Success, `failure` otherwise.
         */
        readonly state = "success";
        /**
         * Constructs the success result with the value of the result.
         * @param value Value of the result, if the result is success.
         */
        constructor(value: T);
        /**
         * Error of the result, if the result is failure.
         */
        get error(): null;
        /**
         * Value of the result, if the result is success, or the error, if the result is failure.
         */
        get valueOrError(): T;
        /**
         * Get the value of the result, if the result is success, or throws the error, if result is failure.
         * @returns Value of the result, if the result is success.
         */
        get(): T;
        /**
         * Map the value of the result, if the result is success.
         * @param mapper Mapper to map the value.
         * @returns New result with mapped value.
         */
        map<T2>(mapper: (value: T) => T2): Result<T2, never>;
        /**
         * Map the error of the result, if the result is failure.
         * @param mapper Mapper to map the error.
         * @returns New result with mapped error.
         */
        mapError(): Result<T, never>;
    }
    /**
     * Contains the error, if the result is failure.
     */
    class Failure<E extends Error> {
        readonly error: E;
        /**
         * State of the result. `success` if result is Success, `failure` otherwise.
         */
        readonly state = "failure";
        /**
         * Constructs the failure result with the error of the result.
         * @param error Error of the result, if the result is failure.
         */
        constructor(error: E);
        /**
         * Value of the result, if the result if success.
         */
        get value(): null;
        /**
         * Value of the result, if the result is success, or the error, if the result is failure.
         */
        get valueOrError(): E;
        /**
         * Get the value of the result, if the result is success, or throws the error, if result is failure.
         * @returns Value of the result, if the result is success.
         */
        get(): never;
        /**
         * Map the value of the result, if the result is success.
         * @param mapper Mapper to map the value.
         * @returns New result with mapped value.
         */
        map(): Result<never, E>;
        /**
         * Map the error of the result, if the result is failure.
         * @param mapper Mapper to map the error.
         * @returns New result with mapped error.
         */
        mapError<E2 extends Error>(mapper: (value: E) => E2): Result<never, E2>;
    }
    /**
     * Constructs the success result with the value of the result.
     * @param value Value of the result, if the result is success.
     */
    function success<T>(value: T): Result<T, never>;
    function success(): Result<void, never>;
    /**
     * Constructs the failure result with the error of the result.
     * @param error Error of the result, if the result is failure.
     */
    function failure<E extends Error>(error: E): Result<never, E>;
    /**
     * Indicates whether the specifed result is success.
     * @param result Result to check if it is success.
     * @returns `true` if specifed result is success, `false` otherwise.
     */
    function isSuccess<T, E extends Error>(result: Result<T, E>): result is Result.Success<T>;
    /**
     * Indicates whether the specifed result is failure.
     * @param result Result to check if it is failure.
     * @returns `true` if specifed result is failure, `false` otherwise.
     */
    function isFailure<T, E extends Error>(result: Result<T, E>): result is Result.Failure<E>;
}
