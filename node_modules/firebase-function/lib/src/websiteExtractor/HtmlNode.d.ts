import type DOMParser from 'dom-parser';
export declare class HtmlDom {
    private readonly dom;
    constructor(dom: DOMParser.Dom);
    map<U>(callbackFn: (dom: HtmlDom) => U): U;
    nodeById(id: string): HtmlNode;
    nodesByClass(className: string): HtmlNodeList;
    nodesByTag(tagName: string): HtmlNodeList;
}
export declare class HtmlNode {
    private readonly node;
    constructor(node?: DOMParser.Node | null);
    map<U>(callbackFn: (node: HtmlNode) => U): U;
    nodeById(id: string): HtmlNode;
    nodesByClass(className: string): HtmlNodeList;
    nodesByTag(tagName: string): HtmlNodeList;
    get children(): HtmlNodeList;
    nthChild(index: number): HtmlNode;
    get value(): HtmlValue;
    get text(): string | null;
    attribute(key: string): HtmlValue;
    get attributes(): Array<{
        name: string;
        value: string;
    }> | null;
    get description(): string;
    get nodeObject(): unknown;
}
export declare class HtmlNodeList {
    private readonly nodes;
    constructor(nodes?: DOMParser.Node[] | null);
    map<U>(callbackFn: (node: HtmlNode, index: number) => U): U[] | null;
    compactMap<U>(callbackFn: (node: HtmlNode, index: number) => U | null | undefined): U[] | null;
    forEach(callbackFn: (node: HtmlNode, index: number) => void): void;
    at(index: number): HtmlNode;
}
export declare class HtmlValue {
    private readonly value;
    constructor(value?: string | null);
    toString(): string | null;
    toNumber(): number | null;
    toInt(): number | null;
    regexGroup(regex: RegExp, groupName: string): HtmlValue;
}
