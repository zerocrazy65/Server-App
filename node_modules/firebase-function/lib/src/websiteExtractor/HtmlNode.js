"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlValue = exports.HtmlNodeList = exports.HtmlNode = exports.HtmlDom = void 0;
class HtmlDom {
    dom;
    constructor(dom) {
        this.dom = dom;
    }
    map(callbackFn) {
        return callbackFn(this);
    }
    nodeById(id) {
        return new HtmlNode(this.dom.getElementById(id));
    }
    nodesByClass(className) {
        return new HtmlNodeList(this.dom.getElementsByClassName(className));
    }
    nodesByTag(tagName) {
        return new HtmlNodeList(this.dom.getElementsByTagName(tagName));
    }
}
exports.HtmlDom = HtmlDom;
class HtmlNode {
    node;
    constructor(node) {
        this.node = node ?? null;
    }
    map(callbackFn) {
        return callbackFn(this);
    }
    nodeById(id) {
        if (this.node === null)
            return new HtmlNode();
        return new HtmlNode(this.node.getElementById(id));
    }
    nodesByClass(className) {
        if (this.node === null)
            return new HtmlNodeList();
        return new HtmlNodeList(this.node.getElementsByClassName(className));
    }
    nodesByTag(tagName) {
        if (this.node === null)
            return new HtmlNodeList();
        return new HtmlNodeList(this.node.getElementsByTagName(tagName));
    }
    get children() {
        if (this.node === null)
            return new HtmlNodeList();
        return new HtmlNodeList(this.node.childNodes);
    }
    nthChild(index) {
        if (this.node === null)
            return new HtmlNode();
        const nodeList = this.node.childNodes;
        if (nodeList === undefined || !Number.isInteger(index) || index < 0 || index >= nodeList.length)
            return new HtmlNode(null);
        return new HtmlNode(nodeList[index]);
    }
    get value() {
        if (this.node === null || this.node.childNodes === undefined)
            return new HtmlValue();
        return new HtmlValue(this.node.innerHTML);
    }
    get text() {
        if (this.node === null)
            return null;
        return this.node.textContent;
    }
    attribute(key) {
        if (this.node === null)
            return new HtmlValue();
        return new HtmlValue(this.node.getAttribute(key));
    }
    get attributes() {
        if (this.node === null)
            return null;
        return this.node.attributes;
    }
    get description() {
        return JSON.stringify(this.nodeObject, undefined, 2);
    }
    get nodeObject() {
        if (this.node === null)
            return 'null';
        if (this.node.childNodes === undefined)
            return this.node.textContent;
        return this.node.childNodes.map((node, index) => {
            return {
                index: index,
                tag: node.nodeName,
                id: node.getAttribute('id') ?? undefined,
                class: node.getAttribute('class') ?? undefined,
                src: node.getAttribute('src') ?? undefined,
                href: node.getAttribute('href') ?? undefined,
                content: node.childNodes === undefined ? node.textContent : undefined,
                children: node.childNodes === undefined ? undefined : new HtmlNode(node).nodeObject
            };
        });
    }
}
exports.HtmlNode = HtmlNode;
class HtmlNodeList {
    nodes;
    constructor(nodes) {
        this.nodes = nodes ?? null;
    }
    map(callbackFn) {
        if (this.nodes === null)
            return null;
        return this.nodes.map(node => new HtmlNode(node)).map(callbackFn);
    }
    compactMap(callbackFn) {
        if (this.nodes === null)
            return null;
        return this.nodes.map(node => new HtmlNode(node)).flatMap((node, index) => callbackFn(node, index) ?? []);
    }
    forEach(callbackFn) {
        if (this.nodes === null)
            return;
        this.nodes.map(node => new HtmlNode(node)).forEach(callbackFn);
    }
    at(index) {
        if (this.nodes === null)
            return new HtmlNode();
        return new HtmlNode(this.nodes[index]);
    }
}
exports.HtmlNodeList = HtmlNodeList;
class HtmlValue {
    value;
    constructor(value) {
        this.value = value ?? null;
    }
    toString() {
        if (this.value === null)
            return null;
        return this.value.trim();
    }
    toNumber() {
        if (this.value === null)
            return null;
        const value = Number(this.value);
        return Number.isNaN(value) ? null : value;
    }
    toInt() {
        if (this.value === null)
            return null;
        const value = Number.parseInt(this.value);
        return Number.isNaN(value) ? null : value;
    }
    regexGroup(regex, groupName) {
        if (this.value === null)
            return new HtmlValue(null);
        const match = regex.exec(this.value);
        if (match === null)
            return new HtmlValue(null);
        const groupList = match.groups;
        if (groupList === undefined || !(groupName in groupList))
            return new HtmlValue(null);
        return new HtmlValue(groupList[groupName]);
    }
}
exports.HtmlValue = HtmlValue;
