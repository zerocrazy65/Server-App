import type * as functions from 'firebase-functions';
import { type DatabaseType } from './DatabaseType';
import { type FirebaseFunctionType } from './FirebaseFunction';
import { type FunctionType } from './FunctionType';
import { type PrivateKeys } from './PrivateKeys';
import { type ValidReturnType } from './ValidReturnType';
export type FirebaseFunctionDescriptor<T extends FunctionType<unknown, ValidReturnType, unknown>> = () => FirebaseFunctionType<T>;
export declare namespace FirebaseFunctionDescriptor {
    type Parameters<T extends FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>>> = T extends FirebaseFunctionDescriptor<infer U> ? FunctionType.Parameters<U> : never;
    type ReturnType<T extends FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>>> = T extends FirebaseFunctionDescriptor<infer U> ? FunctionType.ReturnType<U> : never;
    type FlattenParameters<T extends FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>>> = T extends FirebaseFunctionDescriptor<infer U> ? FunctionType.FlattenParameters<U> : never;
    function create<T extends FunctionType<unknown, ValidReturnType, unknown>>(firebaseFunctions: FirebaseFunctionType<T>): FirebaseFunctionDescriptor<T>;
}
export type FirebaseFunctionsType = FirebaseFunctionDescriptor<FunctionType<unknown, ValidReturnType, unknown>> | {
    [key: string]: FirebaseFunctionsType;
};
export type FirebaseRunnableFunctions = (functions.HttpsFunction & functions.Runnable<unknown>) | {
    [key: string]: FirebaseRunnableFunctions;
};
export declare function createFirebaseFunctions(firebaseFunctions: FirebaseFunctionsType, getPrivateKeys: (databaseType: DatabaseType) => PrivateKeys): FirebaseRunnableFunctions;
