"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseReference = void 0;
const admin = __importStar(require("firebase-admin"));
const crypter_1 = require("../crypter");
const DatabaseSnapshot_1 = require("./DatabaseSnapshot");
class DatabaseReference {
    reference;
    cryptionKeys;
    constructor(reference, cryptionKeys) {
        this.reference = reference;
        this.cryptionKeys = cryptionKeys;
    }
    async snapshot() {
        return new DatabaseSnapshot_1.DatabaseSnapshot(await this.reference.once('value'), this.cryptionKeys);
    }
    child(key) {
        return new DatabaseReference(this.reference.child(key.replaceAll('/', '_')), this.cryptionKeys);
    }
    async set(value, crypted = 'plain') {
        if (crypted === 'encrypt') {
            const crypter = new crypter_1.Crypter(this.cryptionKeys);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            value = crypter.encodeEncrypt(value);
        }
        return await new Promise((resolve, reject) => {
            this.reference.set(value, error => {
                if (error !== null)
                    return reject(error);
                resolve();
            }).catch(reject);
        });
    }
    async remove() {
        return await new Promise((resolve, reject) => {
            this.reference.remove(error => {
                if (error !== null)
                    return reject(error);
                resolve();
            }).catch(reject);
        });
    }
}
exports.DatabaseReference = DatabaseReference;
(function (DatabaseReference) {
    function base(privateKey) {
        const reference = admin.app().database(privateKey.databaseUrl).ref();
        return new DatabaseReference(reference, privateKey.cryptionKeys);
    }
    DatabaseReference.base = base;
})(DatabaseReference = exports.DatabaseReference || (exports.DatabaseReference = {}));
