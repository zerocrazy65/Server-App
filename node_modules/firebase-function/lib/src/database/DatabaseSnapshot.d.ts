import type * as admin from 'firebase-admin';
import { Crypter } from '../crypter';
import { type ObjectValue } from '../utils';
import { type GetCryptedScheme, type IsCryptedScheme, type SchemeType } from './SchemeType';
export declare class DatabaseSnapshot<Scheme extends SchemeType> {
    private readonly snapshot;
    private readonly cryptionKeys;
    constructor(snapshot: admin.database.DataSnapshot, cryptionKeys: Crypter.Keys);
    child<Key extends true extends IsCryptedScheme<Scheme> ? never : (keyof Scheme & string)>(key: Key): DatabaseSnapshot<Scheme extends Record<string, SchemeType> ? Scheme[Key] : never>;
    value(crypted: 'decrypt'): true extends IsCryptedScheme<Scheme> ? GetCryptedScheme<Scheme> : never;
    value(): true extends IsCryptedScheme<Scheme> ? never : Scheme;
    hasChild(path: string): boolean;
    get hasChildren(): boolean;
    get numberChildren(): number;
    get key(): string | null;
    get exists(): boolean;
    forEach(action: (snapshot: DatabaseSnapshot<ObjectValue<Scheme>>) => boolean | void): boolean;
    map<U>(transform: (snapshot: DatabaseSnapshot<ObjectValue<Scheme>>) => U): U[];
    flatMap<U>(transform: (snapshot: DatabaseSnapshot<ObjectValue<Scheme>>) => U[]): U[];
    compactMap<U>(transform: (snapshot: DatabaseSnapshot<ObjectValue<Scheme>>) => U | undefined | null): U[];
    reduce<T>(initialValue: T, transform: (value: T, snapshot: DatabaseSnapshot<ObjectValue<Scheme>>) => T): T;
}
