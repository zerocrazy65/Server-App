"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseSnapshot = void 0;
const crypter_1 = require("../crypter");
class DatabaseSnapshot {
    snapshot;
    cryptionKeys;
    constructor(snapshot, cryptionKeys) {
        this.snapshot = snapshot;
        this.cryptionKeys = cryptionKeys;
    }
    child(key) {
        return new DatabaseSnapshot(this.snapshot.child(key.replaceAll('/', '_')), this.cryptionKeys);
    }
    value(crypted = 'plain') {
        if (crypted === 'decrypt') {
            const crypter = new crypter_1.Crypter(this.cryptionKeys);
            return crypter.decryptDecode(this.snapshot.val());
        }
        return this.snapshot.val();
    }
    hasChild(path) {
        return this.snapshot.hasChild(path.replaceAll('/', '_'));
    }
    get hasChildren() {
        return this.snapshot.hasChildren();
    }
    get numberChildren() {
        return this.snapshot.numChildren();
    }
    get key() {
        return this.snapshot.key;
    }
    get exists() {
        return this.snapshot.exists();
    }
    forEach(action) {
        return this.snapshot.forEach(snapshot => {
            return action(new DatabaseSnapshot(snapshot, this.cryptionKeys));
        });
    }
    map(transform) {
        const result = [];
        this.forEach(snapshot => {
            result.push(transform(snapshot));
        });
        return result;
    }
    flatMap(transform) {
        const result = [];
        this.forEach(snapshot => {
            for (const value of transform(snapshot))
                result.push(value);
        });
        return result;
    }
    compactMap(transform) {
        const result = [];
        this.forEach(snapshot => {
            const value = transform(snapshot);
            if (value !== undefined && value !== null)
                result.push(value);
        });
        return result;
    }
    reduce(initialValue, transform) {
        this.forEach(snapshot => {
            initialValue = transform(initialValue, snapshot);
        });
        return initialValue;
    }
}
exports.DatabaseSnapshot = DatabaseSnapshot;
