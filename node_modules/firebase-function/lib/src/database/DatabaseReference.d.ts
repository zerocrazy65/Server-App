import * as admin from 'firebase-admin';
import { Crypter } from '../crypter';
import { type PrivateKeys } from '../PrivateKeys';
import { DatabaseSnapshot } from './DatabaseSnapshot';
import { type IsCryptedScheme, type SchemeType, type GetCryptedScheme } from './SchemeType';
export declare class DatabaseReference<Scheme extends SchemeType> {
    private readonly reference;
    private readonly cryptionKeys;
    constructor(reference: admin.database.Reference, cryptionKeys: Crypter.Keys);
    snapshot(): Promise<DatabaseSnapshot<Scheme>>;
    child<Key extends true extends IsCryptedScheme<Scheme> ? never : (keyof Scheme & string)>(key: Key): DatabaseReference<Scheme extends Record<string, SchemeType> ? Scheme[Key] : never>;
    set(value: GetCryptedScheme<Scheme>, crypted: 'encrypt'): Promise<void>;
    set(value: true extends IsCryptedScheme<Scheme> ? never : Scheme): Promise<void>;
    remove(): Promise<void>;
}
export declare namespace DatabaseReference {
    function base<Scheme extends SchemeType>(privateKey: PrivateKeys): DatabaseReference<Scheme>;
}
